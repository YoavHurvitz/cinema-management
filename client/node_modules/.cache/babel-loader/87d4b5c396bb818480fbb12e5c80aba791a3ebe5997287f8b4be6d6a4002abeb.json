{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport moviesReducer from './moviesSlice';\nimport membersReducer from './membersSlice';\nimport subscriptionsReducer from './subscriptionsSlice';\nimport userReducer from './userSlice';\nimport { setUser } from '../redux/userSlice'; // Assume you have a userSlice for managing user state\n\nexport const store = configureStore({\n  reducer: {\n    movies: moviesReducer,\n    members: membersReducer,\n    subscriptions: subscriptionsReducer,\n    user: userReducer\n  }\n});\nconst savedUser = localStorage.getItem('user');\nif (savedUser) {\n  store.dispatch(setUser(JSON.parse(savedUser)));\n}\n\n// Subscribe to store changes\nstore.subscribe(() => {\n  const user = store.getState().user;\n  if (user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  } else {\n    localStorage.removeItem('user');\n  }\n});\nexport default store;","map":{"version":3,"names":["configureStore","moviesReducer","membersReducer","subscriptionsReducer","userReducer","setUser","store","reducer","movies","members","subscriptions","user","savedUser","localStorage","getItem","dispatch","JSON","parse","subscribe","getState","setItem","stringify","removeItem"],"sources":["C:/Users/LENOVO/Desktop/Final Project Full Stack/client/src/redux/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport moviesReducer from './moviesSlice';\r\nimport membersReducer from './membersSlice';\r\nimport subscriptionsReducer from './subscriptionsSlice';\r\nimport userReducer from './userSlice';\r\nimport { setUser } from '../redux/userSlice'; // Assume you have a userSlice for managing user state\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    movies: moviesReducer,\r\n    members: membersReducer,\r\n    subscriptions: subscriptionsReducer,\r\n    user: userReducer\r\n  },\r\n});\r\n\r\nconst savedUser = localStorage.getItem('user');\r\nif (savedUser) {\r\n  store.dispatch(setUser(JSON.parse(savedUser)));\r\n}\r\n\r\n// Subscribe to store changes\r\nstore.subscribe(() => {\r\n  const user = store.getState().user;\r\n  if (user) {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  } else {\r\n    localStorage.removeItem('user');\r\n  }\r\n});\r\n\r\nexport default store;"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,aAAa,MAAM,eAAe;AACzC,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,oBAAoB,MAAM,sBAAsB;AACvD,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,OAAO,QAAQ,oBAAoB,CAAC,CAAC;;AAE9C,OAAO,MAAMC,KAAK,GAAGN,cAAc,CAAC;EAClCO,OAAO,EAAE;IACPC,MAAM,EAAEP,aAAa;IACrBQ,OAAO,EAAEP,cAAc;IACvBQ,aAAa,EAAEP,oBAAoB;IACnCQ,IAAI,EAAEP;EACR;AACF,CAAC,CAAC;AAEF,MAAMQ,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;AAC9C,IAAIF,SAAS,EAAE;EACbN,KAAK,CAACS,QAAQ,CAACV,OAAO,CAACW,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC,CAAC;AAChD;;AAEA;AACAN,KAAK,CAACY,SAAS,CAAC,MAAM;EACpB,MAAMP,IAAI,GAAGL,KAAK,CAACa,QAAQ,CAAC,CAAC,CAACR,IAAI;EAClC,IAAIA,IAAI,EAAE;IACRE,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEJ,IAAI,CAACK,SAAS,CAACV,IAAI,CAAC,CAAC;EACpD,CAAC,MAAM;IACLE,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;EACjC;AACF,CAAC,CAAC;AAEF,eAAehB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
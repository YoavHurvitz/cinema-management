{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../services/api';\nexport const fetchMovies = createAsyncThunk('movies/fetchMovies', async () => {\n  const response = await api.get('/movies');\n  return response.data;\n});\nconst moviesSlice = createSlice({\n  name: 'movies',\n  initialState: [],\n  reducers: {\n    setMovies: (state, action) => {\n      return action.payload;\n    },\n    updateMovie: (state, action) => {\n      const index = state.findIndex(movie => movie._id === action.payload._id);\n      if (index !== -1) {\n        state[index] = action.payload;\n      }\n    },\n    deleteMovie: (state, action) => {\n      return state.filter(movie => movie._id !== action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\n      return action.payload;\n    });\n  }\n});\nexport const {\n  setMovies,\n  updateMovie,\n  deleteMovie\n} = moviesSlice.actions;\nexport default moviesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","fetchMovies","response","get","data","moviesSlice","name","initialState","reducers","setMovies","state","action","payload","updateMovie","index","findIndex","movie","_id","deleteMovie","filter","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["C:/Users/LENOVO/Desktop/Final Project Full Stack/client/src/redux/moviesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../services/api';\r\n\r\nexport const fetchMovies = createAsyncThunk(\r\n  'movies/fetchMovies',\r\n  async () => {\r\n    const response = await api.get('/movies');\r\n    return response.data;\r\n  }\r\n);\r\n\r\nconst moviesSlice = createSlice({\r\n  name: 'movies',\r\n  initialState: [],\r\n  reducers: {\r\n    setMovies: (state, action) => {\r\n      return action.payload;\r\n    },\r\n    updateMovie: (state, action) => {\r\n      const index = state.findIndex(movie => movie._id === action.payload._id);\r\n      if (index !== -1) {\r\n        state[index] = action.payload;\r\n      }\r\n    },\r\n    deleteMovie: (state, action) => {\r\n      return state.filter(movie => movie._id !== action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchMovies.fulfilled, (state, action) => {\r\n      return action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { setMovies, updateMovie, deleteMovie } = moviesSlice.actions;\r\nexport default moviesSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,GAAG,MAAM,iBAAiB;AAEjC,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACzC,oBAAoB,EACpB,YAAY;EACV,MAAMG,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,SAAS,CAAC;EACzC,OAAOD,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,MAAMC,WAAW,GAAGP,WAAW,CAAC;EAC9BQ,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B,OAAOA,MAAM,CAACC,OAAO;IACvB,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAMG,KAAK,GAAGJ,KAAK,CAACK,SAAS,CAACC,KAAK,IAAIA,KAAK,CAACC,GAAG,KAAKN,MAAM,CAACC,OAAO,CAACK,GAAG,CAAC;MACxE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBJ,KAAK,CAACI,KAAK,CAAC,GAAGH,MAAM,CAACC,OAAO;MAC/B;IACF,CAAC;IACDM,WAAW,EAAEA,CAACR,KAAK,EAAEC,MAAM,KAAK;MAC9B,OAAOD,KAAK,CAACS,MAAM,CAACH,KAAK,IAAIA,KAAK,CAACC,GAAG,KAAKN,MAAM,CAACC,OAAO,CAAC;IAC5D;EACF,CAAC;EACDQ,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACrB,WAAW,CAACsB,SAAS,EAAE,CAACb,KAAK,EAAEC,MAAM,KAAK;MACxD,OAAOA,MAAM,CAACC,OAAO;IACvB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,SAAS;EAAEI,WAAW;EAAEK;AAAY,CAAC,GAAGb,WAAW,CAACmB,OAAO;AAC1E,eAAenB,WAAW,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}